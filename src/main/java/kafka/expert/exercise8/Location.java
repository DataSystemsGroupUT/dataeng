/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package kafka.expert.exercise8;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Location extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 975604036607254012L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Location\",\"namespace\":\"kafka.expert.exercise8\",\"fields\":[{\"name\":\"building\",\"type\":\"string\",\"doc\":\"The building address\"},{\"name\":\"floor\",\"type\":\"int\",\"doc\":\"The floor number\"},{\"name\":\"number\",\"type\":\"int\",\"doc\":\"The room number\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Location> ENCODER =
      new BinaryMessageEncoder<Location>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Location> DECODER =
      new BinaryMessageDecoder<Location>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Location> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Location> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Location>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Location to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Location from a ByteBuffer. */
  public static Location fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The building address */
  @Deprecated public java.lang.CharSequence building;
  /** The floor number */
  @Deprecated public int floor;
  /** The room number */
  @Deprecated public int number;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Location() {}

  /**
   * All-args constructor.
   * @param building The building address
   * @param floor The floor number
   * @param number The room number
   */
  public Location(java.lang.CharSequence building, java.lang.Integer floor, java.lang.Integer number) {
    this.building = building;
    this.floor = floor;
    this.number = number;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return building;
    case 1: return floor;
    case 2: return number;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: building = (java.lang.CharSequence)value$; break;
    case 1: floor = (java.lang.Integer)value$; break;
    case 2: number = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'building' field.
   * @return The building address
   */
  public java.lang.CharSequence getBuilding() {
    return building;
  }

  /**
   * Sets the value of the 'building' field.
   * The building address
   * @param value the value to set.
   */
  public void setBuilding(java.lang.CharSequence value) {
    this.building = value;
  }

  /**
   * Gets the value of the 'floor' field.
   * @return The floor number
   */
  public java.lang.Integer getFloor() {
    return floor;
  }

  /**
   * Sets the value of the 'floor' field.
   * The floor number
   * @param value the value to set.
   */
  public void setFloor(java.lang.Integer value) {
    this.floor = value;
  }

  /**
   * Gets the value of the 'number' field.
   * @return The room number
   */
  public java.lang.Integer getNumber() {
    return number;
  }

  /**
   * Sets the value of the 'number' field.
   * The room number
   * @param value the value to set.
   */
  public void setNumber(java.lang.Integer value) {
    this.number = value;
  }

  /**
   * Creates a new Location RecordBuilder.
   * @return A new Location RecordBuilder
   */
  public static kafka.expert.exercise8.Location.Builder newBuilder() {
    return new kafka.expert.exercise8.Location.Builder();
  }

  /**
   * Creates a new Location RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Location RecordBuilder
   */
  public static kafka.expert.exercise8.Location.Builder newBuilder(kafka.expert.exercise8.Location.Builder other) {
    return new kafka.expert.exercise8.Location.Builder(other);
  }

  /**
   * Creates a new Location RecordBuilder by copying an existing Location instance.
   * @param other The existing instance to copy.
   * @return A new Location RecordBuilder
   */
  public static kafka.expert.exercise8.Location.Builder newBuilder(kafka.expert.exercise8.Location other) {
    return new kafka.expert.exercise8.Location.Builder(other);
  }

  /**
   * RecordBuilder for Location instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Location>
    implements org.apache.avro.data.RecordBuilder<Location> {

    /** The building address */
    private java.lang.CharSequence building;
    /** The floor number */
    private int floor;
    /** The room number */
    private int number;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(kafka.expert.exercise8.Location.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.building)) {
        this.building = data().deepCopy(fields()[0].schema(), other.building);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.floor)) {
        this.floor = data().deepCopy(fields()[1].schema(), other.floor);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.number)) {
        this.number = data().deepCopy(fields()[2].schema(), other.number);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Location instance
     * @param other The existing instance to copy.
     */
    private Builder(kafka.expert.exercise8.Location other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.building)) {
        this.building = data().deepCopy(fields()[0].schema(), other.building);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.floor)) {
        this.floor = data().deepCopy(fields()[1].schema(), other.floor);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.number)) {
        this.number = data().deepCopy(fields()[2].schema(), other.number);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'building' field.
      * The building address
      * @return The value.
      */
    public java.lang.CharSequence getBuilding() {
      return building;
    }

    /**
      * Sets the value of the 'building' field.
      * The building address
      * @param value The value of 'building'.
      * @return This builder.
      */
    public kafka.expert.exercise8.Location.Builder setBuilding(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.building = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'building' field has been set.
      * The building address
      * @return True if the 'building' field has been set, false otherwise.
      */
    public boolean hasBuilding() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'building' field.
      * The building address
      * @return This builder.
      */
    public kafka.expert.exercise8.Location.Builder clearBuilding() {
      building = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'floor' field.
      * The floor number
      * @return The value.
      */
    public java.lang.Integer getFloor() {
      return floor;
    }

    /**
      * Sets the value of the 'floor' field.
      * The floor number
      * @param value The value of 'floor'.
      * @return This builder.
      */
    public kafka.expert.exercise8.Location.Builder setFloor(int value) {
      validate(fields()[1], value);
      this.floor = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'floor' field has been set.
      * The floor number
      * @return True if the 'floor' field has been set, false otherwise.
      */
    public boolean hasFloor() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'floor' field.
      * The floor number
      * @return This builder.
      */
    public kafka.expert.exercise8.Location.Builder clearFloor() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'number' field.
      * The room number
      * @return The value.
      */
    public java.lang.Integer getNumber() {
      return number;
    }

    /**
      * Sets the value of the 'number' field.
      * The room number
      * @param value The value of 'number'.
      * @return This builder.
      */
    public kafka.expert.exercise8.Location.Builder setNumber(int value) {
      validate(fields()[2], value);
      this.number = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'number' field has been set.
      * The room number
      * @return True if the 'number' field has been set, false otherwise.
      */
    public boolean hasNumber() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'number' field.
      * The room number
      * @return This builder.
      */
    public kafka.expert.exercise8.Location.Builder clearNumber() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Location build() {
      try {
        Location record = new Location();
        record.building = fieldSetFlags()[0] ? this.building : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.floor = fieldSetFlags()[1] ? this.floor : (java.lang.Integer) defaultValue(fields()[1]);
        record.number = fieldSetFlags()[2] ? this.number : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Location>
    WRITER$ = (org.apache.avro.io.DatumWriter<Location>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Location>
    READER$ = (org.apache.avro.io.DatumReader<Location>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
