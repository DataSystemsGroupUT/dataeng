# (Copyright) [2016 - 2017] Confluent, Inc.


# This template contains some of the commonly used configurations for the Connect Worker to connect
# and produce to the destination cluster.


############################################################
#
#               BASIC WORKER SETTINGS
#
############################################################

# A list of host/port pairs to use for establishing the initial connection to the destination
# Kafka cluster.
bootstrap.servers=localhost:9092

# The converters specify the format of data in Kafka and how to translate it into Connect data.
# Every Connect user will need to configure these based on the format they want their data in
# when loaded from or stored into Kafka
key.converter=org.apache.kafka.connect.json.JsonConverter
value.converter=org.apache.kafka.connect.json.JsonConverter

# Converter-specific settings can be passed in by prefixing the Converter's setting with the
# converter we want to apply it to.
key.converter.schemas.enable=true
value.converter.schemas.enable=true

# The internal converter used for offsets, config, and status data is configurable and must be
# specified, but most users will always want to use the built-in default. Offset, config, and
# status data is never visible outside of Kafka Connect in this format.
internal.key.converter=org.apache.kafka.connect.json.JsonConverter
internal.value.converter=org.apache.kafka.connect.json.JsonConverter
internal.key.converter.schemas.enable=false
internal.value.converter.schemas.enable=false

# Store offsets in a local file
offset.storage.file.filename=/tmp/connect.offsets
# Interval at which to try committing offsets for tasks.
#offset.flush.interval.ms=60000

# These are provided to inform the user about the presence of the REST host and port configs
# Hostname & Port for the REST API to listen on. If this is set, it will bind to the interface
# used to listen to requests.
#rest.host.name=
#rest.port=8083

# The Hostname & Port that will be given out to other workers to connect to i.e. URLs that are
# routable from other servers.
#rest.advertised.host.name=
#rest.advertised.port=

# A list of absolute filesystem paths separated by commas (,) to enable class loading isolation
# for plugins (connectors, converters, transformations). The list should consist of top level
# directories that include any combination of:
# a) directories immediately containing jars with plugins and their dependencies
# b) uber-jars with plugins and their dependencies
# c) directories immediately containing the package directory structure of classes of plugins and
#    their dependencies
#
#plugin.path=/usr/local/share/java,/usr/local/share/kafka/plugins,/opt/connectors


############################################################
#
#        SECURITY SETTINGS FOR DESTINATION BROKER
#
############################################################

# Protocol used to communicate with brokers. Valid values are:
# a) PLAINTEXT
# b) SSL
# c) SASL_PLAINTEXT
# d) SASL_SSL
#security.protocol=SASL_SSL

# The IANA-registered name of a SASL mechanism used for client connections. This may be any
# mechanism for which a security provider is available. GSSAPI is the default mechanism.
#sasl.mechanism = PLAIN

# JAAS login context parameters for SASL connections in the format used by JAAS configuration
# files. JAAS configuration file format is described here:
# http://docs.oracle.com/javase/8/docs/technotes/guides/security/jgss/tutorials/LoginConfigFile.html
# The format for the value is: '<loginModuleClass> <controlFlag> (<optionName>=<optionValue>)*;'
#sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required \
#    username="alice" \
#    password="alice-secret";

# The location of the trust store file
#ssl.truststore.location=/home/kafka/client.truststore.jks

# The password for the trust store file. If a password is not set access to the truststore is
# still available, but integrity checking is disabled.
#ssl.truststore.password=<passwd>

# The location of the key store file. This is optional for client and can be used for two-way
# authentication for client
#ssl.keystore.location=/home/kafka/client.keystore.jks

# The store password for the key store file. This is optional for client and only needed if
# ssl.keystore.location is configured.
#ssl.keystore.password=<passwd>

# The password of the private key in the key store file.
#ssl.key.password=<passwd>


############################################################
#
#       SECURITY SETTINGS FOR THE DESTINATION PRODUCER
#
############################################################

# These security settings are used only when creating producers for the destination cluster. By
# default, the producer inherits these from the worker. Set values below only if the producer
# would need different security settings.

# Protocol used to communicate with brokers. Valid values are:
# a) PLAINTEXT
# b) SSL
# c) SASL_PLAINTEXT
# d) SASL_SSL
#producer.security.protocol=SASL_SSL

# The IANA-registered name of a SASL mechanism used for client connections. This may be any
# mechanism for which a security provider is available. GSSAPI is the default mechanism.
#producer.sasl.mechanism = PLAIN

# JAAS login context parameters for SASL connections in the format used by JAAS configuration
# files. JAAS configuration file format is described here:
# http://docs.oracle.com/javase/8/docs/technotes/guides/security/jgss/tutorials/LoginConfigFile.html
# The format for the value is: '<loginModuleClass> <controlFlag> (<optionName>=<optionValue>)*;'
#producer.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required \
#    username="alice" \
#    password="alice-secret";

# The location of the trust store file
#producer.ssl.truststore.location=/home/kafka/client.truststore.jks

# The password for the trust store file. If a password is not set access to the truststore is
# still available, but integrity checking is disabled.
#producer.ssl.truststore.password=<passwd>

# The location of the key store file. This is optional for client and can be used for two-way
# authentication for client
#producer.ssl.keystore.location=/home/kafka/client.keystore.jks

# The store password for the key store file. This is optional for client and only needed if
# ssl.keystore.location is configured.
#producer.ssl.keystore.password=<passwd>

# The password of the private key in the key store file.
#producer.ssl.key.password=<passwd>



############################################################
#
#       SECURITY SETTINGS FOR THE DESTINATION CONSUMER
#
############################################################

# These security settings are used only when creating consumers for the destination cluster. By
# default, the consumer inherits these from the worker. Set values below only if the consumers
# would need different security settings.

# Protocol used to communicate with brokers. Valid values are:
# a) PLAINTEXT
# b) SSL
# c) SASL_PLAINTEXT
# d) SASL_SSL
#consumer.security.protocol=SASL_SSL

# The IANA-registered name of a SASL mechanism used for client connections. This may be any
# mechanism for which a security provider is available. GSSAPI is the default mechanism.
#consumer.sasl.mechanism = PLAIN

# JAAS login context parameters for SASL connections in the format used by JAAS configuration
# files. JAAS configuration file format is described here:
# http://docs.oracle.com/javase/8/docs/technotes/guides/security/jgss/tutorials/LoginConfigFile.html
# The format for the value is: '<loginModuleClass> <controlFlag> (<optionName>=<optionValue>)*;'
#consumer.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required \
#    username="alice" \
#    password="alice-secret";

# The location of the trust store file
#consumer.ssl.truststore.location=/home/kafka/client.truststore.jks

# The password for the trust store file. If a password is not set access to the truststore is
# still available, but integrity checking is disabled.
#consumer.ssl.truststore.password=<passwd>

# The location of the key store file. This is optional for client and can be used for two-way
# authentication for client
#consumer.ssl.keystore.location=/home/kafka/client.keystore.jks

# The store password for the key store file. This is optional for client and only needed if
# ssl.keystore.location is configured.
#consumer.ssl.keystore.password=<passwd>

# The password of the private key in the key store file.
#consumer.ssl.key.password=<passwd>



############################################################
#
#        INTERCEPTOR AND ITS SECURITY ADDITIONS
#
############################################################

# Interceptor class to monitor the producer at the worker writing to the destination cluster
#producer.interceptor.classes=io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor

# Protocol used to communicate with brokers. Valid values are:
# a) PLAINTEXT
# b) SSL
# c) SASL_PLAINTEXT
# d) SASL_SSL
#producer.confluent.monitoring.interceptor.security.protocol=SASL_SSL

# The IANA-registered name of a SASL mechanism used for client connections. This may be any
# mechanism for which a security provider is available. GSSAPI is the default mechanism.
#producer.confluent.monitoring.interceptor.sasl.mechanism = PLAIN

# JAAS login context parameters for SASL connections in the format used by JAAS configuration
# files. JAAS configuration file format is described here:
# http://docs.oracle.com/javase/8/docs/technotes/guides/security/jgss/tutorials/LoginConfigFile.html
# The format for the value is: '<loginModuleClass> <controlFlag> (<optionName>=<optionValue>)*;'
#producer.confluent.monitoring.interceptor.sasl.jaas.config=org.apache.kafka.common.security
# .plain.PlainLoginModule required \
#    username="alice" \
#    password="alice-secret";

# The location of the trust store file
#producer.confluent.monitoring.interceptor.ssl.truststore.location=/home/kafka/client.truststore.jks

# The password for the trust store file. If a password is not set access to the truststore is
# still available, but integrity checking is disabled.
#producer.confluent.monitoring.interceptor.ssl.truststore.password=<passwd>

# The location of the key store file. This is optional for client and can be used for two-way
# authentication for client
#producer.confluent.monitoring.interceptor.ssl.keystore.location=/home/kafka/client.keystore.jks

# The store password for the key store file. This is optional for client and only needed if
# ssl.keystore.location is configured.
#producer.confluent.monitoring.interceptor.ssl.keystore.password=<passwd>

# The password of the private key in the key store file.
#producer.confluent.monitoring.interceptor.ssl.key.password=<passwd>

# Interceptor class to monitor the consumer for the destination cluster
#consumer.interceptor.classes=io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor

# Protocol used to communicate with brokers. Valid values are:
# a) PLAINTEXT
# b) SSL
# c) SASL_PLAINTEXT
# d) SASL_SSL
#consumer.confluent.monitoring.interceptor.security.protocol=SASL_SSL

# The IANA-registered name of a SASL mechanism used for client connections. This may be any
# mechanism for which a security provider is available. GSSAPI is the default mechanism.
#consumer.confluent.monitoring.interceptor.sasl.mechanism = PLAIN

# JAAS login context parameters for SASL connections in the format used by JAAS configuration
# files. JAAS configuration file format is described here:
# http://docs.oracle.com/javase/8/docs/technotes/guides/security/jgss/tutorials/LoginConfigFile.html
# The format for the value is: '<loginModuleClass> <controlFlag> (<optionName>=<optionValue>)*;'
#consumer.confluent.monitoring.interceptor.sasl.jaas.config=org.apache.kafka.common.security
# .plain.PlainLoginModule required \
#    username="alice" \
#    password="alice-secret";

# The location of the trust store file
#consumer.confluent.monitoring.interceptor.ssl.truststore.location=/home/kafka/client.truststore.jks

# The password for the trust store file. If a password is not set access to the truststore is
# still available, but integrity checking is disabled.
#consumer.confluent.monitoring.interceptor.ssl.truststore.password=<passwd>

# The location of the key store file. This is optional for client and can be used for two-way
# authentication for client
#consumer.confluent.monitoring.interceptor.ssl.keystore.location=/home/kafka/client.keystore.jks

# The store password for the key store file. This is optional for client and only needed if
# ssl.keystore.location is configured.
#consumer.confluent.monitoring.interceptor.ssl.keystore.password=<passwd>

# The password of the private key in the key store file.
#consumer.confluent.monitoring.interceptor.ssl.key.password=<passwd>
