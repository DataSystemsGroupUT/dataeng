/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ee.ut.cs.dsg;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Capacity extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7398947219368735266L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Capacity\",\"namespace\":\"ee.ut.cs.dsg\",\"fields\":[{\"name\":\"cap\",\"type\":\"int\",\"doc\":\"The preferred value from the count\"},{\"name\":\"room\",\"type\":\"string\",\"doc\":\"The room number\"},{\"name\":\"floor\",\"type\":\"string\",\"doc\":\"The floor number\"},{\"name\":\"building\",\"type\":\"string\",\"doc\":\"The building number\"},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"The measurement timestamp\"},{\"name\":\"author\",\"type\":\"string\",\"doc\":\"The author of the configuration\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Capacity> ENCODER =
      new BinaryMessageEncoder<Capacity>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Capacity> DECODER =
      new BinaryMessageDecoder<Capacity>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Capacity> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Capacity> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Capacity> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Capacity>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Capacity to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Capacity from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Capacity instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Capacity fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The preferred value from the count */
   private int cap;
  /** The room number */
   private java.lang.CharSequence room;
  /** The floor number */
   private java.lang.CharSequence floor;
  /** The building number */
   private java.lang.CharSequence building;
  /** The measurement timestamp */
   private long timestamp;
  /** The author of the configuration */
   private java.lang.CharSequence author;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Capacity() {}

  /**
   * All-args constructor.
   * @param cap The preferred value from the count
   * @param room The room number
   * @param floor The floor number
   * @param building The building number
   * @param timestamp The measurement timestamp
   * @param author The author of the configuration
   */
  public Capacity(java.lang.Integer cap, java.lang.CharSequence room, java.lang.CharSequence floor, java.lang.CharSequence building, java.lang.Long timestamp, java.lang.CharSequence author) {
    this.cap = cap;
    this.room = room;
    this.floor = floor;
    this.building = building;
    this.timestamp = timestamp;
    this.author = author;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return cap;
    case 1: return room;
    case 2: return floor;
    case 3: return building;
    case 4: return timestamp;
    case 5: return author;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: cap = (java.lang.Integer)value$; break;
    case 1: room = (java.lang.CharSequence)value$; break;
    case 2: floor = (java.lang.CharSequence)value$; break;
    case 3: building = (java.lang.CharSequence)value$; break;
    case 4: timestamp = (java.lang.Long)value$; break;
    case 5: author = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'cap' field.
   * @return The preferred value from the count
   */
  public int getCap() {
    return cap;
  }


  /**
   * Sets the value of the 'cap' field.
   * The preferred value from the count
   * @param value the value to set.
   */
  public void setCap(int value) {
    this.cap = value;
  }

  /**
   * Gets the value of the 'room' field.
   * @return The room number
   */
  public java.lang.CharSequence getRoom() {
    return room;
  }


  /**
   * Sets the value of the 'room' field.
   * The room number
   * @param value the value to set.
   */
  public void setRoom(java.lang.CharSequence value) {
    this.room = value;
  }

  /**
   * Gets the value of the 'floor' field.
   * @return The floor number
   */
  public java.lang.CharSequence getFloor() {
    return floor;
  }


  /**
   * Sets the value of the 'floor' field.
   * The floor number
   * @param value the value to set.
   */
  public void setFloor(java.lang.CharSequence value) {
    this.floor = value;
  }

  /**
   * Gets the value of the 'building' field.
   * @return The building number
   */
  public java.lang.CharSequence getBuilding() {
    return building;
  }


  /**
   * Sets the value of the 'building' field.
   * The building number
   * @param value the value to set.
   */
  public void setBuilding(java.lang.CharSequence value) {
    this.building = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The measurement timestamp
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * The measurement timestamp
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'author' field.
   * @return The author of the configuration
   */
  public java.lang.CharSequence getAuthor() {
    return author;
  }


  /**
   * Sets the value of the 'author' field.
   * The author of the configuration
   * @param value the value to set.
   */
  public void setAuthor(java.lang.CharSequence value) {
    this.author = value;
  }

  /**
   * Creates a new Capacity RecordBuilder.
   * @return A new Capacity RecordBuilder
   */
  public static ee.ut.cs.dsg.Capacity.Builder newBuilder() {
    return new ee.ut.cs.dsg.Capacity.Builder();
  }

  /**
   * Creates a new Capacity RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Capacity RecordBuilder
   */
  public static ee.ut.cs.dsg.Capacity.Builder newBuilder(ee.ut.cs.dsg.Capacity.Builder other) {
    if (other == null) {
      return new ee.ut.cs.dsg.Capacity.Builder();
    } else {
      return new ee.ut.cs.dsg.Capacity.Builder(other);
    }
  }

  /**
   * Creates a new Capacity RecordBuilder by copying an existing Capacity instance.
   * @param other The existing instance to copy.
   * @return A new Capacity RecordBuilder
   */
  public static ee.ut.cs.dsg.Capacity.Builder newBuilder(ee.ut.cs.dsg.Capacity other) {
    if (other == null) {
      return new ee.ut.cs.dsg.Capacity.Builder();
    } else {
      return new ee.ut.cs.dsg.Capacity.Builder(other);
    }
  }

  /**
   * RecordBuilder for Capacity instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Capacity>
    implements org.apache.avro.data.RecordBuilder<Capacity> {

    /** The preferred value from the count */
    private int cap;
    /** The room number */
    private java.lang.CharSequence room;
    /** The floor number */
    private java.lang.CharSequence floor;
    /** The building number */
    private java.lang.CharSequence building;
    /** The measurement timestamp */
    private long timestamp;
    /** The author of the configuration */
    private java.lang.CharSequence author;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ee.ut.cs.dsg.Capacity.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.cap)) {
        this.cap = data().deepCopy(fields()[0].schema(), other.cap);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.room)) {
        this.room = data().deepCopy(fields()[1].schema(), other.room);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.floor)) {
        this.floor = data().deepCopy(fields()[2].schema(), other.floor);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.building)) {
        this.building = data().deepCopy(fields()[3].schema(), other.building);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.author)) {
        this.author = data().deepCopy(fields()[5].schema(), other.author);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing Capacity instance
     * @param other The existing instance to copy.
     */
    private Builder(ee.ut.cs.dsg.Capacity other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.cap)) {
        this.cap = data().deepCopy(fields()[0].schema(), other.cap);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.room)) {
        this.room = data().deepCopy(fields()[1].schema(), other.room);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.floor)) {
        this.floor = data().deepCopy(fields()[2].schema(), other.floor);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.building)) {
        this.building = data().deepCopy(fields()[3].schema(), other.building);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.author)) {
        this.author = data().deepCopy(fields()[5].schema(), other.author);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'cap' field.
      * The preferred value from the count
      * @return The value.
      */
    public int getCap() {
      return cap;
    }


    /**
      * Sets the value of the 'cap' field.
      * The preferred value from the count
      * @param value The value of 'cap'.
      * @return This builder.
      */
    public ee.ut.cs.dsg.Capacity.Builder setCap(int value) {
      validate(fields()[0], value);
      this.cap = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'cap' field has been set.
      * The preferred value from the count
      * @return True if the 'cap' field has been set, false otherwise.
      */
    public boolean hasCap() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'cap' field.
      * The preferred value from the count
      * @return This builder.
      */
    public ee.ut.cs.dsg.Capacity.Builder clearCap() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'room' field.
      * The room number
      * @return The value.
      */
    public java.lang.CharSequence getRoom() {
      return room;
    }


    /**
      * Sets the value of the 'room' field.
      * The room number
      * @param value The value of 'room'.
      * @return This builder.
      */
    public ee.ut.cs.dsg.Capacity.Builder setRoom(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.room = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'room' field has been set.
      * The room number
      * @return True if the 'room' field has been set, false otherwise.
      */
    public boolean hasRoom() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'room' field.
      * The room number
      * @return This builder.
      */
    public ee.ut.cs.dsg.Capacity.Builder clearRoom() {
      room = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'floor' field.
      * The floor number
      * @return The value.
      */
    public java.lang.CharSequence getFloor() {
      return floor;
    }


    /**
      * Sets the value of the 'floor' field.
      * The floor number
      * @param value The value of 'floor'.
      * @return This builder.
      */
    public ee.ut.cs.dsg.Capacity.Builder setFloor(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.floor = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'floor' field has been set.
      * The floor number
      * @return True if the 'floor' field has been set, false otherwise.
      */
    public boolean hasFloor() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'floor' field.
      * The floor number
      * @return This builder.
      */
    public ee.ut.cs.dsg.Capacity.Builder clearFloor() {
      floor = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'building' field.
      * The building number
      * @return The value.
      */
    public java.lang.CharSequence getBuilding() {
      return building;
    }


    /**
      * Sets the value of the 'building' field.
      * The building number
      * @param value The value of 'building'.
      * @return This builder.
      */
    public ee.ut.cs.dsg.Capacity.Builder setBuilding(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.building = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'building' field has been set.
      * The building number
      * @return True if the 'building' field has been set, false otherwise.
      */
    public boolean hasBuilding() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'building' field.
      * The building number
      * @return This builder.
      */
    public ee.ut.cs.dsg.Capacity.Builder clearBuilding() {
      building = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * The measurement timestamp
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * The measurement timestamp
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public ee.ut.cs.dsg.Capacity.Builder setTimestamp(long value) {
      validate(fields()[4], value);
      this.timestamp = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * The measurement timestamp
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * The measurement timestamp
      * @return This builder.
      */
    public ee.ut.cs.dsg.Capacity.Builder clearTimestamp() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'author' field.
      * The author of the configuration
      * @return The value.
      */
    public java.lang.CharSequence getAuthor() {
      return author;
    }


    /**
      * Sets the value of the 'author' field.
      * The author of the configuration
      * @param value The value of 'author'.
      * @return This builder.
      */
    public ee.ut.cs.dsg.Capacity.Builder setAuthor(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.author = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'author' field has been set.
      * The author of the configuration
      * @return True if the 'author' field has been set, false otherwise.
      */
    public boolean hasAuthor() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'author' field.
      * The author of the configuration
      * @return This builder.
      */
    public ee.ut.cs.dsg.Capacity.Builder clearAuthor() {
      author = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Capacity build() {
      try {
        Capacity record = new Capacity();
        record.cap = fieldSetFlags()[0] ? this.cap : (java.lang.Integer) defaultValue(fields()[0]);
        record.room = fieldSetFlags()[1] ? this.room : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.floor = fieldSetFlags()[2] ? this.floor : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.building = fieldSetFlags()[3] ? this.building : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.timestamp = fieldSetFlags()[4] ? this.timestamp : (java.lang.Long) defaultValue(fields()[4]);
        record.author = fieldSetFlags()[5] ? this.author : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Capacity>
    WRITER$ = (org.apache.avro.io.DatumWriter<Capacity>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Capacity>
    READER$ = (org.apache.avro.io.DatumReader<Capacity>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.cap);

    out.writeString(this.room);

    out.writeString(this.floor);

    out.writeString(this.building);

    out.writeLong(this.timestamp);

    out.writeString(this.author);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.cap = in.readInt();

      this.room = in.readString(this.room instanceof Utf8 ? (Utf8)this.room : null);

      this.floor = in.readString(this.floor instanceof Utf8 ? (Utf8)this.floor : null);

      this.building = in.readString(this.building instanceof Utf8 ? (Utf8)this.building : null);

      this.timestamp = in.readLong();

      this.author = in.readString(this.author instanceof Utf8 ? (Utf8)this.author : null);

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.cap = in.readInt();
          break;

        case 1:
          this.room = in.readString(this.room instanceof Utf8 ? (Utf8)this.room : null);
          break;

        case 2:
          this.floor = in.readString(this.floor instanceof Utf8 ? (Utf8)this.floor : null);
          break;

        case 3:
          this.building = in.readString(this.building instanceof Utf8 ? (Utf8)this.building : null);
          break;

        case 4:
          this.timestamp = in.readLong();
          break;

        case 5:
          this.author = in.readString(this.author instanceof Utf8 ? (Utf8)this.author : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










