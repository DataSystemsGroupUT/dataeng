/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package shakespeare_example.model;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ShakespeareKey extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ShakespeareKey\",\"namespace\":\"shakespeare_example.model\",\"fields\":[{\"name\":\"work\",\"type\":\"string\",\"doc\":\"The name of the work\"},{\"name\":\"year\",\"type\":\"int\",\"doc\":\"The year the work was published\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The name of the work */
  @Deprecated public java.lang.CharSequence work;
  /** The year the work was published */
  @Deprecated public int year;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public ShakespeareKey() {}

  /**
   * All-args constructor.
   */
  public ShakespeareKey(java.lang.CharSequence work, java.lang.Integer year) {
    this.work = work;
    this.year = year;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return work;
    case 1: return year;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: work = (java.lang.CharSequence)value$; break;
    case 1: year = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'work' field.
   * The name of the work   */
  public java.lang.CharSequence getWork() {
    return work;
  }

  /**
   * Sets the value of the 'work' field.
   * The name of the work   * @param value the value to set.
   */
  public void setWork(java.lang.CharSequence value) {
    this.work = value;
  }

  /**
   * Gets the value of the 'year' field.
   * The year the work was published   */
  public java.lang.Integer getYear() {
    return year;
  }

  /**
   * Sets the value of the 'year' field.
   * The year the work was published   * @param value the value to set.
   */
  public void setYear(java.lang.Integer value) {
    this.year = value;
  }

  /** Creates a new ShakespeareKey RecordBuilder */
  public static shakespeare_example.model.ShakespeareKey.Builder newBuilder() {
    return new shakespeare_example.model.ShakespeareKey.Builder();
  }
  
  /** Creates a new ShakespeareKey RecordBuilder by copying an existing Builder */
  public static shakespeare_example.model.ShakespeareKey.Builder newBuilder(shakespeare_example.model.ShakespeareKey.Builder other) {
    return new shakespeare_example.model.ShakespeareKey.Builder(other);
  }
  
  /** Creates a new ShakespeareKey RecordBuilder by copying an existing ShakespeareKey instance */
  public static shakespeare_example.model.ShakespeareKey.Builder newBuilder(shakespeare_example.model.ShakespeareKey other) {
    return new shakespeare_example.model.ShakespeareKey.Builder(other);
  }
  
  /**
   * RecordBuilder for ShakespeareKey instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ShakespeareKey>
    implements org.apache.avro.data.RecordBuilder<ShakespeareKey> {

    private java.lang.CharSequence work;
    private int year;

    /** Creates a new Builder */
    private Builder() {
      super(shakespeare_example.model.ShakespeareKey.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(shakespeare_example.model.ShakespeareKey.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.work)) {
        this.work = data().deepCopy(fields()[0].schema(), other.work);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.year)) {
        this.year = data().deepCopy(fields()[1].schema(), other.year);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing ShakespeareKey instance */
    private Builder(shakespeare_example.model.ShakespeareKey other) {
            super(shakespeare_example.model.ShakespeareKey.SCHEMA$);
      if (isValidValue(fields()[0], other.work)) {
        this.work = data().deepCopy(fields()[0].schema(), other.work);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.year)) {
        this.year = data().deepCopy(fields()[1].schema(), other.year);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'work' field */
    public java.lang.CharSequence getWork() {
      return work;
    }
    
    /** Sets the value of the 'work' field */
    public shakespeare_example.model.ShakespeareKey.Builder setWork(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.work = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'work' field has been set */
    public boolean hasWork() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'work' field */
    public shakespeare_example.model.ShakespeareKey.Builder clearWork() {
      work = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'year' field */
    public java.lang.Integer getYear() {
      return year;
    }
    
    /** Sets the value of the 'year' field */
    public shakespeare_example.model.ShakespeareKey.Builder setYear(int value) {
      validate(fields()[1], value);
      this.year = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'year' field has been set */
    public boolean hasYear() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'year' field */
    public shakespeare_example.model.ShakespeareKey.Builder clearYear() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public ShakespeareKey build() {
      try {
        ShakespeareKey record = new ShakespeareKey();
        record.work = fieldSetFlags()[0] ? this.work : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.year = fieldSetFlags()[1] ? this.year : (java.lang.Integer) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
