/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package shakespeare_example.model;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ShakespeareValue extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ShakespeareValue\",\"namespace\":\"shakespeare_example.model\",\"fields\":[{\"name\":\"line_number\",\"type\":\"int\",\"doc\":\"The line number for line\"},{\"name\":\"line\",\"type\":\"string\",\"doc\":\"The line from Shakespeare\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The line number for line */
  @Deprecated public int line_number;
  /** The line from Shakespeare */
  @Deprecated public java.lang.CharSequence line;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public ShakespeareValue() {}

  /**
   * All-args constructor.
   */
  public ShakespeareValue(java.lang.Integer line_number, java.lang.CharSequence line) {
    this.line_number = line_number;
    this.line = line;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return line_number;
    case 1: return line;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: line_number = (java.lang.Integer)value$; break;
    case 1: line = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'line_number' field.
   * The line number for line   */
  public java.lang.Integer getLineNumber() {
    return line_number;
  }

  /**
   * Sets the value of the 'line_number' field.
   * The line number for line   * @param value the value to set.
   */
  public void setLineNumber(java.lang.Integer value) {
    this.line_number = value;
  }

  /**
   * Gets the value of the 'line' field.
   * The line from Shakespeare   */
  public java.lang.CharSequence getLine() {
    return line;
  }

  /**
   * Sets the value of the 'line' field.
   * The line from Shakespeare   * @param value the value to set.
   */
  public void setLine(java.lang.CharSequence value) {
    this.line = value;
  }

  /** Creates a new ShakespeareValue RecordBuilder */
  public static shakespeare_example.model.ShakespeareValue.Builder newBuilder() {
    return new shakespeare_example.model.ShakespeareValue.Builder();
  }
  
  /** Creates a new ShakespeareValue RecordBuilder by copying an existing Builder */
  public static shakespeare_example.model.ShakespeareValue.Builder newBuilder(shakespeare_example.model.ShakespeareValue.Builder other) {
    return new shakespeare_example.model.ShakespeareValue.Builder(other);
  }
  
  /** Creates a new ShakespeareValue RecordBuilder by copying an existing ShakespeareValue instance */
  public static shakespeare_example.model.ShakespeareValue.Builder newBuilder(shakespeare_example.model.ShakespeareValue other) {
    return new shakespeare_example.model.ShakespeareValue.Builder(other);
  }
  
  /**
   * RecordBuilder for ShakespeareValue instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ShakespeareValue>
    implements org.apache.avro.data.RecordBuilder<ShakespeareValue> {

    private int line_number;
    private java.lang.CharSequence line;

    /** Creates a new Builder */
    private Builder() {
      super(shakespeare_example.model.ShakespeareValue.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(shakespeare_example.model.ShakespeareValue.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.line_number)) {
        this.line_number = data().deepCopy(fields()[0].schema(), other.line_number);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.line)) {
        this.line = data().deepCopy(fields()[1].schema(), other.line);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing ShakespeareValue instance */
    private Builder(shakespeare_example.model.ShakespeareValue other) {
            super(shakespeare_example.model.ShakespeareValue.SCHEMA$);
      if (isValidValue(fields()[0], other.line_number)) {
        this.line_number = data().deepCopy(fields()[0].schema(), other.line_number);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.line)) {
        this.line = data().deepCopy(fields()[1].schema(), other.line);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'line_number' field */
    public java.lang.Integer getLineNumber() {
      return line_number;
    }
    
    /** Sets the value of the 'line_number' field */
    public shakespeare_example.model.ShakespeareValue.Builder setLineNumber(int value) {
      validate(fields()[0], value);
      this.line_number = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'line_number' field has been set */
    public boolean hasLineNumber() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'line_number' field */
    public shakespeare_example.model.ShakespeareValue.Builder clearLineNumber() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'line' field */
    public java.lang.CharSequence getLine() {
      return line;
    }
    
    /** Sets the value of the 'line' field */
    public shakespeare_example.model.ShakespeareValue.Builder setLine(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.line = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'line' field has been set */
    public boolean hasLine() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'line' field */
    public shakespeare_example.model.ShakespeareValue.Builder clearLine() {
      line = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public ShakespeareValue build() {
      try {
        ShakespeareValue record = new ShakespeareValue();
        record.line_number = fieldSetFlags()[0] ? this.line_number : (java.lang.Integer) defaultValue(fields()[0]);
        record.line = fieldSetFlags()[1] ? this.line : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
